/*
 * TrafficUPView.java
 */

package trafficup;

import java.util.Collection;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 * The application's main frame.
 */
public class TrafficUPView extends FrameView implements Observer {

    private boolean loading_mode = false;

    public TrafficUPView(SingleFrameApplication app) {
        super(app);

        initComponents();

        this.jTableApplication.setAutoCreateRowSorter(true);
        this.jTableTransport.setAutoCreateRowSorter(true);

        DataCollector.getSingleton().addObserver(this);

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        //progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    //progressBar.setVisible(true);
                    //progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    //progressBar.setVisible(false);
                    //progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    //progressBar.setVisible(true);
                    //progressBar.setIndeterminate(false);
                    //progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = TrafficUPApp.getApplication().getMainFrame();
            aboutBox = new TrafficUPAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        TrafficUPApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableTransport = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableApplication = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lstBoxDstIP = new javax.swing.JComboBox();
        lstBoxSrcIP = new javax.swing.JComboBox();
        chkBoxFilterSrcIP = new javax.swing.JCheckBox();
        chkBoxFilterDstIP = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        lstBoxDstPort = new javax.swing.JComboBox();
        lstBoxSrcPort = new javax.swing.JComboBox();
        chkBoxFilterSrcPort = new javax.swing.JCheckBox();
        chkBoxFilterDstPort = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        lstBoxToS = new javax.swing.JComboBox();
        lstBoxInternetProtocol = new javax.swing.JComboBox();
        chkBoxFilterInternetProtocol = new javax.swing.JCheckBox();
        chkBoxFilterToS = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        chkBoxFlowBytesMinimum = new javax.swing.JCheckBox();
        chkBoxFlowBytesMaximum = new javax.swing.JCheckBox();
        txtFlowBytesMinimum = new javax.swing.JTextField();
        txtFlowBytesMaximum = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        lstBoxDstMAC = new javax.swing.JComboBox();
        lstBoxSrcMAC = new javax.swing.JComboBox();
        chkBoxFilterSrcMAC = new javax.swing.JCheckBox();
        chkBoxFilterDstMAC = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        chkBoxFlowPacketsMinimum = new javax.swing.JCheckBox();
        chkBoxFlowPacketsMaximum = new javax.swing.JCheckBox();
        txtFlowPacketsMinimum = new javax.swing.JTextField();
        txtFlowPacketsMaximum = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        lstBoxNetIName = new javax.swing.JComboBox();
        chkBoxFilterNetIName = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        lblNFlows = new javax.swing.JLabel();
        lblNBytes = new javax.swing.JLabel();
        lblCTime = new javax.swing.JLabel();
        lblNPackets = new javax.swing.JLabel();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(600, 566));

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jPanel3.setName("jPanel3"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jTableTransport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Protocol", "# Packets", "# Bytes", "% Packets", "% Bytes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableTransport.setName("jTableTransport"); // NOI18N
        jScrollPane3.setViewportView(jTableTransport);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(trafficup.TrafficUPApp.class).getContext().getResourceMap(TrafficUPView.class);
        jTableTransport.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTableTransport.columnModel.title0")); // NOI18N
        jTableTransport.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTableTransport.columnModel.title3")); // NOI18N
        jTableTransport.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTableTransport.columnModel.title1")); // NOI18N
        jTableTransport.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("jTableTransport.columnModel.title4")); // NOI18N
        jTableTransport.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("jTableTransport.columnModel.title2")); // NOI18N
        jTableTransport.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("jTableTransport.columnModel.title5")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 968, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        jPanel4.setName("jPanel4"); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        jTableApplication.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Source IP", "Source Port", "Destination IP", "Destination Port", "Protocol", "ToS", "Network Interface", "# Packets", "# Bytes", "% Packets", "% Bytes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableApplication.setName("jTableApplication"); // NOI18N
        jScrollPane4.setViewportView(jTableApplication);
        jTableApplication.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTableApplication.columnModel.title0")); // NOI18N
        jTableApplication.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTableApplication.columnModel.title1")); // NOI18N
        jTableApplication.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTableApplication.columnModel.title2")); // NOI18N
        jTableApplication.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("jTableApplication.columnModel.title3")); // NOI18N
        jTableApplication.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("jTableApplication.columnModel.title7")); // NOI18N
        jTableApplication.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("jTableApplication.columnModel.title8")); // NOI18N
        jTableApplication.getColumnModel().getColumn(6).setHeaderValue(resourceMap.getString("jTableApplication.columnModel.title10")); // NOI18N
        jTableApplication.getColumnModel().getColumn(7).setHeaderValue(resourceMap.getString("jTableApplication.columnModel.title4")); // NOI18N
        jTableApplication.getColumnModel().getColumn(8).setHeaderValue(resourceMap.getString("jTableApplication.columnModel.title6")); // NOI18N
        jTableApplication.getColumnModel().getColumn(9).setHeaderValue(resourceMap.getString("jTableApplication.columnModel.title5")); // NOI18N
        jTableApplication.getColumnModel().getColumn(10).setHeaderValue(resourceMap.getString("jTableApplication.columnModel.title9")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 968, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel4.TabConstraints.tabTitle"), jPanel4); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel5.border.title"))); // NOI18N
        jPanel5.setName("jPanel5"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        lstBoxDstIP.setName("lstBoxDstIP"); // NOI18N
        lstBoxDstIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstBoxDstIPActionPerformed(evt);
            }
        });

        lstBoxSrcIP.setName("lstBoxSrcIP"); // NOI18N
        lstBoxSrcIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstBoxSrcIPActionPerformed(evt);
            }
        });

        chkBoxFilterSrcIP.setText(resourceMap.getString("chkBoxFilterSrcIP.text")); // NOI18N
        chkBoxFilterSrcIP.setName("chkBoxFilterSrcIP"); // NOI18N
        chkBoxFilterSrcIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxFilterSrcIPActionPerformed(evt);
            }
        });

        chkBoxFilterDstIP.setText(resourceMap.getString("chkBoxFilterDstIP.text")); // NOI18N
        chkBoxFilterDstIP.setName("chkBoxFilterDstIP"); // NOI18N
        chkBoxFilterDstIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxFilterDstIPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkBoxFilterSrcIP)
                    .addComponent(chkBoxFilterDstIP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 179, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lstBoxSrcIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lstBoxDstIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxFilterSrcIP)
                    .addComponent(lstBoxSrcIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxFilterDstIP)
                    .addComponent(lstBoxDstIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel6.border.title"))); // NOI18N
        jPanel6.setName("jPanel6"); // NOI18N

        lstBoxDstPort.setName("lstBoxDstPort"); // NOI18N
        lstBoxDstPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstBoxDstPortActionPerformed(evt);
            }
        });

        lstBoxSrcPort.setName("lstBoxSrcPort"); // NOI18N
        lstBoxSrcPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstBoxSrcPortActionPerformed(evt);
            }
        });

        chkBoxFilterSrcPort.setText(resourceMap.getString("chkBoxFilterSrcPort.text")); // NOI18N
        chkBoxFilterSrcPort.setName("chkBoxFilterSrcPort"); // NOI18N
        chkBoxFilterSrcPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxFilterSrcPortActionPerformed(evt);
            }
        });

        chkBoxFilterDstPort.setText(resourceMap.getString("chkBoxFilterDstPort.text")); // NOI18N
        chkBoxFilterDstPort.setName("chkBoxFilterDstPort"); // NOI18N
        chkBoxFilterDstPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxFilterDstPortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkBoxFilterSrcPort)
                    .addComponent(chkBoxFilterDstPort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 166, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lstBoxSrcPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lstBoxDstPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxFilterSrcPort)
                    .addComponent(lstBoxSrcPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxFilterDstPort)
                    .addComponent(lstBoxDstPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel8.border.title"))); // NOI18N
        jPanel8.setName("jPanel8"); // NOI18N

        lstBoxToS.setName("lstBoxToS"); // NOI18N
        lstBoxToS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstBoxToSActionPerformed(evt);
            }
        });

        lstBoxInternetProtocol.setName("lstBoxInternetProtocol"); // NOI18N
        lstBoxInternetProtocol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstBoxInternetProtocolActionPerformed(evt);
            }
        });

        chkBoxFilterInternetProtocol.setText(resourceMap.getString("chkBoxFilterInternetProtocol.text")); // NOI18N
        chkBoxFilterInternetProtocol.setName("chkBoxFilterInternetProtocol"); // NOI18N
        chkBoxFilterInternetProtocol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxFilterInternetProtocolActionPerformed(evt);
            }
        });

        chkBoxFilterToS.setText(resourceMap.getString("chkBoxFilterToS.text")); // NOI18N
        chkBoxFilterToS.setName("chkBoxFilterToS"); // NOI18N
        chkBoxFilterToS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxFilterToSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkBoxFilterInternetProtocol)
                    .addComponent(chkBoxFilterToS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lstBoxToS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lstBoxInternetProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxFilterInternetProtocol)
                    .addComponent(lstBoxInternetProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxFilterToS)
                    .addComponent(lstBoxToS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel10.border.title"))); // NOI18N
        jPanel10.setName("jPanel10"); // NOI18N

        chkBoxFlowBytesMinimum.setText(resourceMap.getString("chkBoxFlowBytesMinimum.text")); // NOI18N
        chkBoxFlowBytesMinimum.setName("chkBoxFlowBytesMinimum"); // NOI18N
        chkBoxFlowBytesMinimum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxFlowBytesMinimumActionPerformed(evt);
            }
        });

        chkBoxFlowBytesMaximum.setText(resourceMap.getString("chkBoxFlowBytesMaximum.text")); // NOI18N
        chkBoxFlowBytesMaximum.setName("chkBoxFlowBytesMaximum"); // NOI18N
        chkBoxFlowBytesMaximum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxFlowBytesMaximumActionPerformed(evt);
            }
        });

        txtFlowBytesMinimum.setText(resourceMap.getString("txtFlowBytesMinimum.text")); // NOI18N
        txtFlowBytesMinimum.setName("txtFlowBytesMinimum"); // NOI18N

        txtFlowBytesMaximum.setText(resourceMap.getString("txtFlowBytesMaximum.text")); // NOI18N
        txtFlowBytesMaximum.setName("txtFlowBytesMaximum"); // NOI18N

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(chkBoxFlowBytesMinimum)
                        .addGap(21, 21, 21)
                        .addComponent(txtFlowBytesMinimum, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(chkBoxFlowBytesMaximum)
                        .addGap(18, 18, 18)
                        .addComponent(txtFlowBytesMaximum, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(368, 368, 368))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxFlowBytesMinimum)
                    .addComponent(txtFlowBytesMinimum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxFlowBytesMaximum)
                    .addComponent(txtFlowBytesMaximum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel11.border.title"))); // NOI18N
        jPanel11.setName("jPanel11"); // NOI18N

        lstBoxDstMAC.setName("lstBoxDstMAC"); // NOI18N
        lstBoxDstMAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstBoxDstMACActionPerformed(evt);
            }
        });

        lstBoxSrcMAC.setName("lstBoxSrcMAC"); // NOI18N
        lstBoxSrcMAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstBoxSrcMACActionPerformed(evt);
            }
        });

        chkBoxFilterSrcMAC.setText(resourceMap.getString("chkBoxFilterSrcMAC.text")); // NOI18N
        chkBoxFilterSrcMAC.setName("chkBoxFilterSrcMAC"); // NOI18N
        chkBoxFilterSrcMAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxFilterSrcMACActionPerformed(evt);
            }
        });

        chkBoxFilterDstMAC.setText(resourceMap.getString("chkBoxFilterDstMAC.text")); // NOI18N
        chkBoxFilterDstMAC.setName("chkBoxFilterDstMAC"); // NOI18N
        chkBoxFilterDstMAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxFilterDstMACActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkBoxFilterSrcMAC)
                    .addComponent(chkBoxFilterDstMAC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 179, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lstBoxSrcMAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lstBoxDstMAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxFilterSrcMAC)
                    .addComponent(lstBoxSrcMAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxFilterDstMAC)
                    .addComponent(lstBoxDstMAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel12.border.title"))); // NOI18N
        jPanel12.setName("jPanel12"); // NOI18N

        chkBoxFlowPacketsMinimum.setText(resourceMap.getString("chkBoxFlowPacketsMinimum.text")); // NOI18N
        chkBoxFlowPacketsMinimum.setName("chkBoxFlowPacketsMinimum"); // NOI18N
        chkBoxFlowPacketsMinimum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxFlowPacketsMinimumActionPerformed(evt);
            }
        });

        chkBoxFlowPacketsMaximum.setText(resourceMap.getString("chkBoxFlowPacketsMaximum.text")); // NOI18N
        chkBoxFlowPacketsMaximum.setName("chkBoxFlowPacketsMaximum"); // NOI18N
        chkBoxFlowPacketsMaximum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxFlowPacketsMaximumActionPerformed(evt);
            }
        });

        txtFlowPacketsMinimum.setText(resourceMap.getString("txtFlowPacketsMinimum.text")); // NOI18N
        txtFlowPacketsMinimum.setName("txtFlowPacketsMinimum"); // NOI18N

        txtFlowPacketsMaximum.setText(resourceMap.getString("txtFlowPacketsMaximum.text")); // NOI18N
        txtFlowPacketsMaximum.setName("txtFlowPacketsMaximum"); // NOI18N

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(chkBoxFlowPacketsMinimum)
                        .addGap(21, 21, 21)
                        .addComponent(txtFlowPacketsMinimum, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(chkBoxFlowPacketsMaximum)
                        .addGap(18, 18, 18)
                        .addComponent(txtFlowPacketsMaximum, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(60, 60, 60))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxFlowPacketsMinimum)
                    .addComponent(txtFlowPacketsMinimum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxFlowPacketsMaximum)
                    .addComponent(txtFlowPacketsMaximum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        lstBoxNetIName.setName("lstBoxNetIName"); // NOI18N
        lstBoxNetIName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstBoxNetINameActionPerformed(evt);
            }
        });

        chkBoxFilterNetIName.setText(resourceMap.getString("chkBoxFilterNetIName.text")); // NOI18N
        chkBoxFilterNetIName.setName("chkBoxFilterNetIName"); // NOI18N
        chkBoxFilterNetIName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxFilterNetINameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(chkBoxFilterNetIName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 496, Short.MAX_VALUE)
                .addComponent(lstBoxNetIName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(chkBoxFilterNetIName)
                .addComponent(lstBoxNetIName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel10, 0, 282, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(362, 362, 362))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 973, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText(resourceMap.getString("jMenuItem3.text")); // NOI18N
        jMenuItem3.setName("jMenuItem3"); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText(resourceMap.getString("jMenuItem4.text")); // NOI18N
        jMenuItem4.setName("jMenuItem4"); // NOI18N
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem4);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(trafficup.TrafficUPApp.class).getContext().getActionMap(TrafficUPView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        menuBar.add(jMenu1);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusPanel.setName("statusPanel"); // NOI18N
        statusPanel.setPreferredSize(new java.awt.Dimension(569, 40));

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        lblNFlows.setText(resourceMap.getString("lblNFlows.text")); // NOI18N
        lblNFlows.setName("lblNFlows"); // NOI18N

        lblNBytes.setText(resourceMap.getString("lblNBytes.text")); // NOI18N
        lblNBytes.setName("lblNBytes"); // NOI18N

        lblCTime.setText(resourceMap.getString("lblCTime.text")); // NOI18N
        lblCTime.setName("lblCTime"); // NOI18N

        lblNPackets.setText(resourceMap.getString("lblNPackets.text")); // NOI18N
        lblNPackets.setName("lblNPackets"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 807, Short.MAX_VALUE)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(statusAnimationLabel)
                            .addComponent(statusMessageLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, statusPanelLayout.createSequentialGroup()
                                .addComponent(lblNFlows, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblNPackets, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(lblNBytes, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCTime, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                        .addComponent(lblCTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(statusMessageLabel)
                            .addComponent(statusAnimationLabel))
                        .addGap(38, 38, 38))
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNFlows)
                            .addComponent(lblNPackets)
                            .addComponent(lblNBytes))
                        .addGap(50, 50, 50)))
                .addGap(294, 294, 294))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser fc = new JFileChooser();
        int res = fc.showOpenDialog(null);

        if(res == JFileChooser.APPROVE_OPTION){
            File arquive = fc.getSelectedFile();
            TCPDumpCapturer cap = new TCPDumpCapturer(arquive.getAbsolutePath());

            DataCollector.getSingleton().clear();

            DataCollector.getSingleton().setDataSources(new String[]{arquive.getName()});
            cap.setDataSource(0);
            cap.start();

            DataCollector.getSingleton().parsePackets();

            resetInterface();
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void chkBoxFilterSrcIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxFilterSrcIPActionPerformed
        update();
    }//GEN-LAST:event_chkBoxFilterSrcIPActionPerformed

    private void chkBoxFilterDstIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxFilterDstIPActionPerformed
        update();
    }//GEN-LAST:event_chkBoxFilterDstIPActionPerformed

    private void lstBoxSrcIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstBoxSrcIPActionPerformed
        this.chkBoxFilterSrcIP.setSelected(true);
        update();
    }//GEN-LAST:event_lstBoxSrcIPActionPerformed

    private void lstBoxDstIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstBoxDstIPActionPerformed
        this.chkBoxFilterDstIP.setSelected(true);
        update();
    }//GEN-LAST:event_lstBoxDstIPActionPerformed

    private void chkBoxFilterInternetProtocolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxFilterInternetProtocolActionPerformed
        update();
    }//GEN-LAST:event_chkBoxFilterInternetProtocolActionPerformed

    private void chkBoxFilterToSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxFilterToSActionPerformed
        update();
    }//GEN-LAST:event_chkBoxFilterToSActionPerformed

    private void lstBoxInternetProtocolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstBoxInternetProtocolActionPerformed
        this.chkBoxFilterInternetProtocol.setSelected(true);
        update();
    }//GEN-LAST:event_lstBoxInternetProtocolActionPerformed

    private void lstBoxToSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstBoxToSActionPerformed
        this.chkBoxFilterToS.setSelected(true);
        update();
    }//GEN-LAST:event_lstBoxToSActionPerformed

    private void chkBoxFilterSrcPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxFilterSrcPortActionPerformed
        update();
    }//GEN-LAST:event_chkBoxFilterSrcPortActionPerformed

    private void chkBoxFilterDstPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxFilterDstPortActionPerformed
        update();
    }//GEN-LAST:event_chkBoxFilterDstPortActionPerformed

    private void lstBoxSrcPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstBoxSrcPortActionPerformed
        this.chkBoxFilterSrcPort.setSelected(true);
        update();
    }//GEN-LAST:event_lstBoxSrcPortActionPerformed

    private void lstBoxDstPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstBoxDstPortActionPerformed
        this.chkBoxFilterDstPort.setSelected(true);
        update();
    }//GEN-LAST:event_lstBoxDstPortActionPerformed

    private void chkBoxFlowBytesMinimumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxFlowBytesMinimumActionPerformed
        update();
    }//GEN-LAST:event_chkBoxFlowBytesMinimumActionPerformed

    private void chkBoxFlowBytesMaximumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxFlowBytesMaximumActionPerformed
        update();
    }//GEN-LAST:event_chkBoxFlowBytesMaximumActionPerformed

    private void lstBoxDstMACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstBoxDstMACActionPerformed
        this.chkBoxFilterDstMAC.setSelected(true);
        update();
    }//GEN-LAST:event_lstBoxDstMACActionPerformed

    private void lstBoxSrcMACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstBoxSrcMACActionPerformed
        this.chkBoxFilterSrcMAC.setSelected(true);
        update();
    }//GEN-LAST:event_lstBoxSrcMACActionPerformed

    private void chkBoxFilterSrcMACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxFilterSrcMACActionPerformed
        update();
    }//GEN-LAST:event_chkBoxFilterSrcMACActionPerformed

    private void chkBoxFilterDstMACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxFilterDstMACActionPerformed
        update();
    }//GEN-LAST:event_chkBoxFilterDstMACActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        (new CaptureWindow()).setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void chkBoxFlowPacketsMinimumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxFlowPacketsMinimumActionPerformed
        update();
    }//GEN-LAST:event_chkBoxFlowPacketsMinimumActionPerformed

    private void chkBoxFlowPacketsMaximumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxFlowPacketsMaximumActionPerformed
        update();
    }//GEN-LAST:event_chkBoxFlowPacketsMaximumActionPerformed

    @SuppressWarnings("unchecked")
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        //load flows
        JFileChooser fc = new JFileChooser();
        int res = fc.showOpenDialog(null);

        if(res == JFileChooser.APPROVE_OPTION){
            File arquive = fc.getSelectedFile();

            ArrayList<Flow> c = new ArrayList<Flow>();
            FileInputStream fis = null;
            ObjectInputStream in = null;
            try{
                fis = new FileInputStream(arquive);
                in = new ObjectInputStream(fis);

                if(fis.available()>0) DataCollector.getSingleton().setCaptureStart(in.readLong());
                if(fis.available()>0) DataCollector.getSingleton().setCaptureEnd(in.readLong());
                if(fis.available()>0) c = (ArrayList<Flow>) in.readObject();
                DataCollector.getSingleton().setFlows(c);
                DataCollector.getSingleton().notifyObservers();
                in.close();
           }catch(IOException ex){
                javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage(), "Error opening Flows' file", javax.swing.JOptionPane.ERROR_MESSAGE);
           }catch(ClassNotFoundException ex2){
                javax.swing.JOptionPane.showMessageDialog(null, ex2.getMessage(), "Error loading Flows", javax.swing.JOptionPane.ERROR_MESSAGE);
           }

           resetInterface();
        }

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        //save Flows
        JFileChooser fc = new JFileChooser();
        int res = fc.showSaveDialog(null);

        if(res == JFileChooser.APPROVE_OPTION){
            File arquive = fc.getSelectedFile();

            Collection<Flow> list = (Collection<Flow>)DataCollector.getSingleton().getFlows();
            try{
                FileOutputStream fos = new FileOutputStream(arquive.getAbsolutePath());
                ObjectOutputStream out = new ObjectOutputStream(fos);
                out.writeLong(DataCollector.getSingleton().getCaptureStart());
                out.writeLong(DataCollector.getSingleton().getCaptureEnd());
                out.writeObject(list);

                out.close();
            }catch(IOException ex){
                    javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage(), "Error saving Flows", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void lstBoxNetINameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstBoxNetINameActionPerformed
        this.chkBoxFilterNetIName.setSelected(true);
        update();
    }//GEN-LAST:event_lstBoxNetINameActionPerformed

    private void chkBoxFilterNetINameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxFilterNetINameActionPerformed
        update();
    }//GEN-LAST:event_chkBoxFilterNetINameActionPerformed

    private Collection<Flow> getFilteredFlowList(){
        DataCollector pMgr = DataCollector.getSingleton();
        ArrayList<Flow> filteredFlows, Flows = (ArrayList<Flow>)pMgr.getFlows();
        filteredFlows = Flows;

        //filters !!

        //network layer
        //protocol
        if( this.chkBoxFilterInternetProtocol.isSelected() ){
            filteredFlows = (ArrayList<Flow>) DataTool.filterProtocol(filteredFlows, (Integer) this.lstBoxInternetProtocol.getSelectedItem());
        }

        //ToS
        if( this.chkBoxFilterToS.isSelected() ){
            filteredFlows = (ArrayList<Flow>) DataTool.filterToS(filteredFlows, (Integer) this.lstBoxToS.getSelectedItem());
        }

        //Network Interface
        if( this.chkBoxFilterNetIName.isSelected() ){
            filteredFlows = (ArrayList<Flow>) DataTool.filterNetIName(filteredFlows, (String) this.lstBoxNetIName.getSelectedItem());
        }

        //source ip address
        if( this.chkBoxFilterSrcIP.isSelected() ){
            filteredFlows = (ArrayList<Flow>) DataTool.filterSrcIP(filteredFlows, (String) this.lstBoxSrcIP.getSelectedItem());
        }

        //destination ip address
        if( this.chkBoxFilterDstIP.isSelected() ){
            filteredFlows = (ArrayList<Flow>) DataTool.filterDstIP(filteredFlows, (String) this.lstBoxDstIP.getSelectedItem());
        }

        //application source port
        if( this.chkBoxFilterSrcPort.isSelected() ){
            filteredFlows = (ArrayList<Flow>) DataTool.filterSrcPort(filteredFlows, (Integer) this.lstBoxSrcPort.getSelectedItem());
        }

        //application destination port
        if( this.chkBoxFilterDstPort.isSelected() ){
            filteredFlows = (ArrayList<Flow>) DataTool.filterDstPort(filteredFlows, (Integer) this.lstBoxDstPort.getSelectedItem());
        }

        //source mac address
        if( this.chkBoxFilterSrcMAC.isSelected() ){
            filteredFlows = (ArrayList<Flow>) DataTool.filterSrcMAC(filteredFlows, DataTool.string2Byte((String)this.lstBoxSrcMAC.getSelectedItem()));
        }

        //destination mac address
        if( this.chkBoxFilterDstMAC.isSelected() ){
            filteredFlows = (ArrayList<Flow>) DataTool.filterDstMAC(filteredFlows, DataTool.string2Byte((String)this.lstBoxDstMAC.getSelectedItem()));
        }

        //FlowBytes minimum
        if( this.chkBoxFlowBytesMinimum.isSelected() ){
            filteredFlows = (ArrayList<Flow>) DataTool.filterFlowBytesMinimum(filteredFlows, Integer.parseInt(this.txtFlowBytesMinimum.getText()));
        }

        //FlowBytes maximum
        if( this.chkBoxFlowBytesMaximum.isSelected() ){
            filteredFlows = (ArrayList<Flow>) DataTool.filterFlowBytesMaximum(filteredFlows, Integer.parseInt(this.txtFlowBytesMaximum.getText()));
        }

        //FlowPackets minimum
        if( this.chkBoxFlowPacketsMinimum.isSelected() ){
            filteredFlows = (ArrayList<Flow>) DataTool.filterFlowPacketsMinimum(filteredFlows, Integer.parseInt(this.txtFlowPacketsMinimum.getText()));
        }

        //FlowPackets maximum
        if( this.chkBoxFlowPacketsMaximum.isSelected() ){
            filteredFlows = (ArrayList<Flow>) DataTool.filterFlowPacketsMaximum(filteredFlows, Integer.parseInt(this.txtFlowPacketsMaximum.getText()));
        }
        
        return filteredFlows;
    }

    private void resetInterface(){
        DataCollector pMgr = DataCollector.getSingleton();

        //this flag is required because everytime we add content to a listbox, it considers an action, and triggers an update()
        loading_mode = true;

        this.lstBoxSrcMAC.removeAllItems();
        this.lstBoxDstMAC.removeAllItems();
        this.lstBoxSrcIP.removeAllItems();
        this.lstBoxDstIP.removeAllItems();
        this.lstBoxDstPort.removeAllItems();
        this.lstBoxSrcPort.removeAllItems();
        this.lstBoxInternetProtocol.removeAllItems();
        this.lstBoxToS.removeAllItems();
        this.lstBoxNetIName.removeAllItems();

        //set listboxs
        //source IP
        for( String ip : pMgr.getSrcIP() ) this.lstBoxSrcIP.addItem(ip);
        this.chkBoxFilterSrcIP.setSelected(false);

        //destination IP
        for( String ip : pMgr.getDstIP() ) this.lstBoxDstIP.addItem(ip);
        this.chkBoxFilterDstIP.setSelected(false);

        //internet protocols
        for( Integer p : pMgr.getInternetProtocols() ) this.lstBoxInternetProtocol.addItem(p);
        this.chkBoxFilterInternetProtocol.setSelected(false);

        //type of service ToS
        for( Integer p : pMgr.getToS() ) this.lstBoxToS.addItem(p);
        this.chkBoxFilterToS.setSelected(false);

        //network interfaces names
        for( String p : pMgr.getNetINames() ) this.lstBoxNetIName.addItem(p);
        this.chkBoxFilterNetIName.setSelected(false);

        //application source port
        for( Integer p : pMgr.getSrcPorts() ) this.lstBoxSrcPort.addItem(p);
        this.chkBoxFilterSrcPort.setSelected(false);

        //application destination port
        for( Integer p : pMgr.getDstPorts() ) this.lstBoxDstPort.addItem(p);
        this.chkBoxFilterDstPort.setSelected(false);

        //source mac
        for( String mac : pMgr.getSrcMacs() ) this.lstBoxSrcMAC.addItem(mac);
        this.chkBoxFilterSrcMAC.setSelected(false);

        //destination mac
        for( String mac : pMgr.getDstMacs() ) this.lstBoxDstMAC.addItem(mac);
        this.chkBoxFilterDstMAC.setSelected(false);

        loading_mode = false;

        update();
    }

    private void update(){

        if(loading_mode) return;

        ArrayList<Flow> filteredFlows = (ArrayList<Flow>) getFilteredFlowList();
        ArrayList<Flow> allFlows = (ArrayList<Flow>) DataCollector.getSingleton().getFlows();

        Long filtered_flows = (long)filteredFlows.size();
        Long total_flows = (long)allFlows.size();
        Float ratio_flows = ((float)filtered_flows / (float)total_flows) * 100;

        Long filtered_packets = DataTool.getFlowN_packets(filteredFlows);
        Long total_packets = DataTool.getFlowN_packets(allFlows);
        Float ratio_packets = ((float)filtered_packets / (float)total_packets) * 100;

        Long filtered_bytes = DataTool.getFlowN_bytes(filteredFlows);
        Long total_bytes = DataTool.getFlowN_bytes(allFlows);
        Float ratio_bytes = ((float)filtered_bytes / (float)total_bytes) * 100;
   

        //show transport data
        DefaultTableModel model_transp = (DefaultTableModel)this.jTableTransport.getModel();
        model_transp.setRowCount(0);   //resets data

        for( int prot : DataCollector.getSingleton().getInternetProtocols() ){
            int prot_packets = DataTool.countIP_ProtocolPackets(filteredFlows, prot);
            int prot_bytes = DataTool.countIP_ProtocolBytes(filteredFlows, prot);

            if( prot_packets > 0 )
                model_transp.addRow(new Object[]{ IP_Protocol.getIP_ProtocolName(prot),
                    prot,  prot_packets,
                    prot_bytes,
                    (float)prot_packets/(float)total_packets*100,
                    (float)prot_bytes/(float)total_bytes*100
                } );
        }

        
        //show application data
        DefaultTableModel model_app = (DefaultTableModel)this.jTableApplication.getModel();
        model_app.setRowCount(0);   //resets data

        for( Flow f : filteredFlows)
            model_app.addRow(new Object[]{
                                f.getSrc_ip(),
                                f.getSrc_port(),
                                f.getDst_ip(),
                                f.getDst_port(),
                                f.getProtocol(),
                                f.getToS(),
                                f.getNetI(),
                                f.getN_packets(),
                                f.getN_bytes(),
                                (float)f.getN_packets()/(float)total_packets*100,
                                (float)f.getN_bytes()/(float)total_bytes*100
                            } );

        //flow stats

        lblNFlows.setText(filtered_flows + "/" + total_flows + " Flows ("+ratio_flows+"%)");
        lblNPackets.setText(filtered_packets + "/" + total_packets + " Packets ("+ratio_packets+"%)");
        lblNBytes.setText(filtered_bytes + "/" + total_bytes + " Bytes ("+ratio_bytes+"%)");
        lblCTime.setText(String.valueOf(DataCollector.getSingleton().getCaptureLength()) + " Seconds");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkBoxFilterDstIP;
    private javax.swing.JCheckBox chkBoxFilterDstMAC;
    private javax.swing.JCheckBox chkBoxFilterDstPort;
    private javax.swing.JCheckBox chkBoxFilterInternetProtocol;
    private javax.swing.JCheckBox chkBoxFilterNetIName;
    private javax.swing.JCheckBox chkBoxFilterSrcIP;
    private javax.swing.JCheckBox chkBoxFilterSrcMAC;
    private javax.swing.JCheckBox chkBoxFilterSrcPort;
    private javax.swing.JCheckBox chkBoxFilterToS;
    private javax.swing.JCheckBox chkBoxFlowBytesMaximum;
    private javax.swing.JCheckBox chkBoxFlowBytesMinimum;
    private javax.swing.JCheckBox chkBoxFlowPacketsMaximum;
    private javax.swing.JCheckBox chkBoxFlowPacketsMinimum;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableApplication;
    private javax.swing.JTable jTableTransport;
    private javax.swing.JLabel lblCTime;
    private javax.swing.JLabel lblNBytes;
    private javax.swing.JLabel lblNFlows;
    private javax.swing.JLabel lblNPackets;
    private javax.swing.JComboBox lstBoxDstIP;
    private javax.swing.JComboBox lstBoxDstMAC;
    private javax.swing.JComboBox lstBoxDstPort;
    private javax.swing.JComboBox lstBoxInternetProtocol;
    private javax.swing.JComboBox lstBoxNetIName;
    private javax.swing.JComboBox lstBoxSrcIP;
    private javax.swing.JComboBox lstBoxSrcMAC;
    private javax.swing.JComboBox lstBoxSrcPort;
    private javax.swing.JComboBox lstBoxToS;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTextField txtFlowBytesMaximum;
    private javax.swing.JTextField txtFlowBytesMinimum;
    private javax.swing.JTextField txtFlowPacketsMaximum;
    private javax.swing.JTextField txtFlowPacketsMinimum;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;

    public void update(Observable o, Object arg) {
        resetInterface();
        update();
    }
}
