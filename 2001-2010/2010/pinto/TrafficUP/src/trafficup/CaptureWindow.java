/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package trafficup;

import java.util.Timer;
import java.util.TimerTask;
import javax.swing.DefaultListModel;

/**
 *
 * @author ricardopinto
 */
public class CaptureWindow extends javax.swing.JDialog {

    private CaptureManager capMgr = new CaptureManager();

    private Thread detail_timer;
    private boolean keep_running = true;


    //sprivate ArrayList<NetworkInterface> inet_interfaces = new ArrayList<NetworkInterface>();

    private Timer timeout = new Timer();
    private TimerTask timeout_executor = new TimerTask(){
                public void run() {
                    stopCapture();
                }
            };

    /** Creates new form CaptureWindow */
    public CaptureWindow(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public CaptureWindow(){
        initComponents();

        DefaultListModel model = new DefaultListModel();

        for( String ni : capMgr.getInterfaceList() ){
            model.addElement(ni);
        }

        this.lstNetInterfaces.setModel(model);
    }

    private void setInterfaceOptions() {
        String net_i = (String)this.lstNetInterfaces.getSelectedValue();

        if(net_i==null) return;

        capMgr.setInterfaceOptions(net_i, this.chkBoxPromiscuous.isSelected(),
                this.chkBoxCaptureFilter.isSelected(), this.txtCaptureFilter.getText());
    }

    class TimerDetails implements Runnable{

	public TimerDetails(){}

	public void run() {
	    keep_running = true;
            int time_elapsed = 0;
	    DataCollector pktMgr = DataCollector.getSingleton();
	    while(keep_running){
		lblTimeElapsed.setText(String.valueOf(time_elapsed));
		lblNPackets.setText(String.valueOf(DataTool.getFlowN_packets(pktMgr.getFlows())));
                time_elapsed += 1;
		try {
		    Thread.sleep(1000);
		} catch (InterruptedException ex) {
		    System.out.println("Interrupt Ex: "+ex.getMessage());
		}
	    }
	}

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstNetInterfaces = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        chkBoxPromiscuous = new javax.swing.JCheckBox();
        txtCaptureTime = new javax.swing.JTextField();
        chkBoxCaptureTimeout = new javax.swing.JCheckBox();
        chkBoxCaptureFilter = new javax.swing.JCheckBox();
        txtCaptureFilter = new javax.swing.JTextField();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblTimeElapsed = new javax.swing.JLabel();
        lblNPackets = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(trafficup.TrafficUPApp.class).getContext().getResourceMap(CaptureWindow.class);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        lstNetInterfaces.setName("lstNetInterfaces"); // NOI18N
        lstNetInterfaces.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lstNetInterfacesMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(lstNetInterfaces);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        chkBoxPromiscuous.setText(resourceMap.getString("chkBoxPromiscuous.text")); // NOI18N
        chkBoxPromiscuous.setName("chkBoxPromiscuous"); // NOI18N
        chkBoxPromiscuous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxPromiscuousActionPerformed(evt);
            }
        });

        txtCaptureTime.setText(resourceMap.getString("txtCaptureTime.text")); // NOI18N
        txtCaptureTime.setName("txtCaptureTime"); // NOI18N

        chkBoxCaptureTimeout.setText(resourceMap.getString("chkBoxCaptureTimeout.text")); // NOI18N
        chkBoxCaptureTimeout.setName("chkBoxCaptureTimeout"); // NOI18N

        chkBoxCaptureFilter.setText(resourceMap.getString("chkBoxCaptureFilter.text")); // NOI18N
        chkBoxCaptureFilter.setName("chkBoxCaptureFilter"); // NOI18N
        chkBoxCaptureFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxCaptureFilterActionPerformed(evt);
            }
        });

        txtCaptureFilter.setText(resourceMap.getString("txtCaptureFilter.text")); // NOI18N
        txtCaptureFilter.setName("txtCaptureFilter"); // NOI18N
        txtCaptureFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCaptureFilterKeyReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(chkBoxCaptureFilter)
                    .add(txtCaptureFilter, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                    .add(chkBoxPromiscuous)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, txtCaptureTime, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                    .add(chkBoxCaptureTimeout))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(chkBoxPromiscuous)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(chkBoxCaptureFilter)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 7, Short.MAX_VALUE)
                .add(txtCaptureFilter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(chkBoxCaptureTimeout)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(txtCaptureTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18))
        );

        btnStart.setText(resourceMap.getString("btnStart.text")); // NOI18N
        btnStart.setName("btnStart"); // NOI18N
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setText(resourceMap.getString("btnStop.text")); // NOI18N
        btnStop.setEnabled(false);
        btnStop.setName("btnStop"); // NOI18N
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnClose.setText(resourceMap.getString("btnClose.text")); // NOI18N
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel3.border.title"))); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        lblTimeElapsed.setText(resourceMap.getString("lblTimeElapsed.text")); // NOI18N
        lblTimeElapsed.setName("lblTimeElapsed"); // NOI18N

        lblNPackets.setText(resourceMap.getString("lblNPackets.text")); // NOI18N
        lblNPackets.setName("lblNPackets"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(jLabel1))
                .add(18, 18, 18)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblNPackets, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .add(lblTimeElapsed, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(lblNPackets))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(lblTimeElapsed)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(btnStart, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .add(btnStop, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .add(btnClose, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnStart)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnStop)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(btnClose))
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        if( DataCollector.getSingleton().hasChanged() ) DataCollector.getSingleton().notifyObservers();
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        
        if( this.lstNetInterfaces.isSelectionEmpty() ) return;

        this.btnStop.setEnabled(true);
        this.btnStart.setEnabled(false);
        this.btnClose.setEnabled(false);
        this.chkBoxPromiscuous.setEnabled(false);
        this.chkBoxCaptureTimeout.setEnabled(false);
        this.txtCaptureTime.setEnabled(false);
        this.lstNetInterfaces.setEnabled(false);

        //DataCollector.getSingleton().clear();

	detail_timer = new Thread( new TimerDetails() );
	detail_timer.start();

        for( Object s : this.lstNetInterfaces.getSelectedValues() ){
            capMgr.startCapturer(String.valueOf(s));
        }

        if( this.chkBoxCaptureTimeout.isSelected() ){
            timeout.schedule(timeout_executor, Long.parseLong(this.txtCaptureTime.getText()));
        }
        
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        stopCapture();
    }//GEN-LAST:event_btnStopActionPerformed

    private void lstNetInterfacesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstNetInterfacesMousePressed
        Object[] net_is = this.lstNetInterfaces.getSelectedValues();

        if( net_is.length != 1 ){
            disableOptions();
            return;
        }

        enableOptions();
        String net_i = String.valueOf(net_is[0]);
        LiveCapturer c = (LiveCapturer)capMgr.getInterface(net_i);

        changeOptions(c.isPromiscuous(), c.isFilterActive(), c.getFilter());

    }//GEN-LAST:event_lstNetInterfacesMousePressed

    private void chkBoxPromiscuousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxPromiscuousActionPerformed
        setInterfaceOptions();
    }//GEN-LAST:event_chkBoxPromiscuousActionPerformed

    private void chkBoxCaptureFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxCaptureFilterActionPerformed
        setInterfaceOptions();
    }//GEN-LAST:event_chkBoxCaptureFilterActionPerformed

    private void txtCaptureFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCaptureFilterKeyReleased
        setInterfaceOptions();
    }//GEN-LAST:event_txtCaptureFilterKeyReleased

    private void enableOptions(){
        changeOptions(false,false,"");
        this.chkBoxPromiscuous.setEnabled(true);
        this.chkBoxCaptureFilter.setEnabled(true);
        this.txtCaptureFilter.setEnabled(true);
    }

    private void disableOptions(){
        changeOptions(false,false,"");
        this.chkBoxPromiscuous.setEnabled(false);
        this.chkBoxCaptureFilter.setEnabled(false);
        this.txtCaptureFilter.setEnabled(false);
    }

    private void changeOptions( boolean promiscuous, boolean filter_active, String filter ){
        this.chkBoxPromiscuous.setSelected(promiscuous);
        this.chkBoxCaptureFilter.setSelected(filter_active);
        this.txtCaptureFilter.setText(filter);
    }

    private void stopCapture(){

        keep_running = false;
        capMgr.stopAllCapturers();

        //if( DataCollector.getSingleton().hasChanged() ) DataCollector.getSingleton().notifyObservers();

        this.btnStart.setEnabled(true);
        this.btnStop.setEnabled(false);
        this.btnClose.setEnabled(true);
        this.chkBoxPromiscuous.setEnabled(true);
        this.chkBoxCaptureTimeout.setEnabled(true);
        this.txtCaptureTime.setEnabled(true);
        this.lstNetInterfaces.setEnabled(true);

        if( this.chkBoxCaptureTimeout.isSelected() ){
            timeout.cancel();
        }

	dispose();
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CaptureWindow dialog = new CaptureWindow(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JCheckBox chkBoxCaptureFilter;
    private javax.swing.JCheckBox chkBoxCaptureTimeout;
    private javax.swing.JCheckBox chkBoxPromiscuous;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblNPackets;
    private javax.swing.JLabel lblTimeElapsed;
    private javax.swing.JList lstNetInterfaces;
    private javax.swing.JTextField txtCaptureFilter;
    private javax.swing.JTextField txtCaptureTime;
    // End of variables declaration//GEN-END:variables

}
